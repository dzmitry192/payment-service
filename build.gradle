plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
    id "com.github.davidmc24.gradle.plugin.avro" version "$gradlePluginAvroVersion"
}

group = 'com.innowise.sivachenko'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation "org.apache.avro:avro:$avroVersion"
    implementation "io.confluent:kafka-avro-serializer:$kafkaAvroSerializerVersion"
    implementation "io.confluent:kafka-schema-registry-client:$kafkaSchemaRegistryClientVersion"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springdocOpenapiVersion"
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    implementation "com.stripe:stripe-java:$stripeJavaVersion"


    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

generateAvroJava {
    source = 'src/main/resources/avro'
    outputDir = file("${projectDir}/src/main/java")
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

tasks.register('fetchSchemas') {
    doLast {
        def schemaRegistryUrl = 'http://localhost:8081'
        def subjects = [
                'payment-service-audit-topic-value',
                'payment-service-notification-topic-value'
        ]

        subjects.each { subject ->
            def url = "${schemaRegistryUrl}/subjects/${subject}/versions/latest"
            def response = new URL(url).text
            def json = new JsonSlurper().parseText(response)
            def schemaString = json.schema

            def schemaFile = new File("src/main/resources/avro/${subject}.avsc")
            schemaFile.parentFile.mkdirs()
            schemaFile.text = JsonOutput.prettyPrint(schemaString)
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

compileJava.dependsOn(fetchSchemas)

tasks.named('test') {
    useJUnitPlatform()
}
