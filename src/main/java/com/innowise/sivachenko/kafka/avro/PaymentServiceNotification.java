/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.innowise.sivachenko.kafka.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentServiceNotification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8523672240350635710L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentServiceNotification\",\"namespace\":\"com.innowise.sivachenko.kafka.avro\",\"fields\":[{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"paymentStatus\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentStatus\",\"symbols\":[\"CANCELED\",\"PROCESSING\",\"SUCCEEDED\",\"REFUNDED\",\"REQUIRES_ACTION\",\"FAILED\"]}},{\"name\":\"amount\",\"type\":\"long\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"notificationType\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentNotificationType\",\"symbols\":[\"CREATE_PAYMENT\",\"REFUND_PAYMENT\",\"CHANGE_PAYMENT_STATUS\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<PaymentServiceNotification> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentServiceNotification> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentServiceNotification> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentServiceNotification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentServiceNotification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentServiceNotification to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentServiceNotification from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentServiceNotification instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentServiceNotification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String email;
  private com.innowise.sivachenko.kafka.avro.PaymentStatus paymentStatus;
  private long amount;
  private java.lang.String currency;
  private java.time.Instant createdAt;
  private com.innowise.sivachenko.kafka.avro.PaymentNotificationType notificationType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentServiceNotification() {}

  /**
   * All-args constructor.
   * @param email The new value for email
   * @param paymentStatus The new value for paymentStatus
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param createdAt The new value for createdAt
   * @param notificationType The new value for notificationType
   */
  public PaymentServiceNotification(java.lang.String email, com.innowise.sivachenko.kafka.avro.PaymentStatus paymentStatus, java.lang.Long amount, java.lang.String currency, java.time.Instant createdAt, com.innowise.sivachenko.kafka.avro.PaymentNotificationType notificationType) {
    this.email = email;
    this.paymentStatus = paymentStatus;
    this.amount = amount;
    this.currency = currency;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.notificationType = notificationType;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return email;
    case 1: return paymentStatus;
    case 2: return amount;
    case 3: return currency;
    case 4: return createdAt;
    case 5: return notificationType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: email = value$ != null ? value$.toString() : null; break;
    case 1: paymentStatus = (com.innowise.sivachenko.kafka.avro.PaymentStatus)value$; break;
    case 2: amount = (java.lang.Long)value$; break;
    case 3: currency = value$ != null ? value$.toString() : null; break;
    case 4: createdAt = (java.time.Instant)value$; break;
    case 5: notificationType = (com.innowise.sivachenko.kafka.avro.PaymentNotificationType)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'paymentStatus' field.
   * @return The value of the 'paymentStatus' field.
   */
  public com.innowise.sivachenko.kafka.avro.PaymentStatus getPaymentStatus() {
    return paymentStatus;
  }


  /**
   * Sets the value of the 'paymentStatus' field.
   * @param value the value to set.
   */
  public void setPaymentStatus(com.innowise.sivachenko.kafka.avro.PaymentStatus value) {
    this.paymentStatus = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public long getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(long value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'notificationType' field.
   * @return The value of the 'notificationType' field.
   */
  public com.innowise.sivachenko.kafka.avro.PaymentNotificationType getNotificationType() {
    return notificationType;
  }


  /**
   * Sets the value of the 'notificationType' field.
   * @param value the value to set.
   */
  public void setNotificationType(com.innowise.sivachenko.kafka.avro.PaymentNotificationType value) {
    this.notificationType = value;
  }

  /**
   * Creates a new PaymentServiceNotification RecordBuilder.
   * @return A new PaymentServiceNotification RecordBuilder
   */
  public static com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder newBuilder() {
    return new com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder();
  }

  /**
   * Creates a new PaymentServiceNotification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentServiceNotification RecordBuilder
   */
  public static com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder newBuilder(com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder other) {
    if (other == null) {
      return new com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder();
    } else {
      return new com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder(other);
    }
  }

  /**
   * Creates a new PaymentServiceNotification RecordBuilder by copying an existing PaymentServiceNotification instance.
   * @param other The existing instance to copy.
   * @return A new PaymentServiceNotification RecordBuilder
   */
  public static com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder newBuilder(com.innowise.sivachenko.kafka.avro.PaymentServiceNotification other) {
    if (other == null) {
      return new com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder();
    } else {
      return new com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentServiceNotification instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentServiceNotification>
    implements org.apache.avro.data.RecordBuilder<PaymentServiceNotification> {

    private java.lang.String email;
    private com.innowise.sivachenko.kafka.avro.PaymentStatus paymentStatus;
    private long amount;
    private java.lang.String currency;
    private java.time.Instant createdAt;
    private com.innowise.sivachenko.kafka.avro.PaymentNotificationType notificationType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.paymentStatus)) {
        this.paymentStatus = data().deepCopy(fields()[1].schema(), other.paymentStatus);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[4].schema(), other.createdAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.notificationType)) {
        this.notificationType = data().deepCopy(fields()[5].schema(), other.notificationType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentServiceNotification instance
     * @param other The existing instance to copy.
     */
    private Builder(com.innowise.sivachenko.kafka.avro.PaymentServiceNotification other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paymentStatus)) {
        this.paymentStatus = data().deepCopy(fields()[1].schema(), other.paymentStatus);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[4].schema(), other.createdAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.notificationType)) {
        this.notificationType = data().deepCopy(fields()[5].schema(), other.notificationType);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder setEmail(java.lang.String value) {
      validate(fields()[0], value);
      this.email = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder clearEmail() {
      email = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentStatus' field.
      * @return The value.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentStatus getPaymentStatus() {
      return paymentStatus;
    }


    /**
      * Sets the value of the 'paymentStatus' field.
      * @param value The value of 'paymentStatus'.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder setPaymentStatus(com.innowise.sivachenko.kafka.avro.PaymentStatus value) {
      validate(fields()[1], value);
      this.paymentStatus = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentStatus' field has been set.
      * @return True if the 'paymentStatus' field has been set, false otherwise.
      */
    public boolean hasPaymentStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'paymentStatus' field.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder clearPaymentStatus() {
      paymentStatus = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public long getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder setAmount(long value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder setCurrency(java.lang.String value) {
      validate(fields()[3], value);
      this.currency = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[4], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder clearCreatedAt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'notificationType' field.
      * @return The value.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentNotificationType getNotificationType() {
      return notificationType;
    }


    /**
      * Sets the value of the 'notificationType' field.
      * @param value The value of 'notificationType'.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder setNotificationType(com.innowise.sivachenko.kafka.avro.PaymentNotificationType value) {
      validate(fields()[5], value);
      this.notificationType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'notificationType' field has been set.
      * @return True if the 'notificationType' field has been set, false otherwise.
      */
    public boolean hasNotificationType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'notificationType' field.
      * @return This builder.
      */
    public com.innowise.sivachenko.kafka.avro.PaymentServiceNotification.Builder clearNotificationType() {
      notificationType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentServiceNotification build() {
      try {
        PaymentServiceNotification record = new PaymentServiceNotification();
        record.email = fieldSetFlags()[0] ? this.email : (java.lang.String) defaultValue(fields()[0]);
        record.paymentStatus = fieldSetFlags()[1] ? this.paymentStatus : (com.innowise.sivachenko.kafka.avro.PaymentStatus) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Long) defaultValue(fields()[2]);
        record.currency = fieldSetFlags()[3] ? this.currency : (java.lang.String) defaultValue(fields()[3]);
        record.createdAt = fieldSetFlags()[4] ? this.createdAt : (java.time.Instant) defaultValue(fields()[4]);
        record.notificationType = fieldSetFlags()[5] ? this.notificationType : (com.innowise.sivachenko.kafka.avro.PaymentNotificationType) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentServiceNotification>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentServiceNotification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentServiceNotification>
    READER$ = (org.apache.avro.io.DatumReader<PaymentServiceNotification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










